/**
 * Copyright (c) 2015-2016, Michael Yang 杨福海 (fuhai999@gmail.com).
 *
 * Licensed under the GNU Lesser General Public License (LGPL) ,Version 3.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.gnu.org/licenses/lgpl-3.0.txt
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.jpress.jp.model.base;

import io.jpress.model.Metadata;
import io.jpress.model.core.JModel;
import io.jpress.model.query.MetaDataQuery;
import java.math.BigInteger;

import com.jfinal.plugin.activerecord.IBean;
import com.jfinal.plugin.ehcache.CacheKit;
import com.jfinal.plugin.ehcache.IDataLoader;

/**
 *  Auto generated by JPress, do not modify this file.
 */
@SuppressWarnings("serial")
public abstract class BaseStatistics<M extends BaseStatistics<M>> extends JModel<M> implements IBean {

	public static final String CACHE_NAME = "statistics";
	public static final String METADATA_TYPE = "statistics";

	public void removeCache(Object key){
		if(key == null) return;
		CacheKit.remove(CACHE_NAME, key);
	}

	public void putCache(Object key,Object value){
		CacheKit.put(CACHE_NAME, key, value);
	}

	public M getCache(Object key){
		return CacheKit.get(CACHE_NAME, key);
	}

	public M getCache(Object key,IDataLoader dataloader){
		return CacheKit.get(CACHE_NAME, key, dataloader);
	}

	public Metadata createMetadata(){
		Metadata md = new Metadata();
		md.setObjectId(getId());
		md.setObjectType(METADATA_TYPE);
		return md;
	}

	public Metadata createMetadata(String key,String value){
		Metadata md = new Metadata();
		md.setObjectId(getId());
		md.setObjectType(METADATA_TYPE);
		md.setMetaKey(key);
		md.setMetaValue(value);
		return md;
	}

	public boolean saveOrUpdateMetadta(String key,String value){
		Metadata metadata = MetaDataQuery.me().findByTypeAndIdAndKey(METADATA_TYPE, getId(), key);
		if (metadata == null) {
			metadata = createMetadata(key, value);
			return metadata.save();
		}
		metadata.setMetaValue(value);
		return metadata.update();
	}

	@Override
	public boolean equals(Object o) {
		if(o == null){ return false; }
		if(!(o instanceof BaseStatistics<?>)){return false;}

		BaseStatistics<?> m = (BaseStatistics<?>) o;
		if(m.getId() == null){return false;}

		return m.getId().compareTo(this.getId()) == 0;
	}

	public void setId(java.math.BigInteger id) {
		set("id", id);
	}

	public java.math.BigInteger getId() {
		Object id = get("id");
		if (id == null)
			return null;

		return id instanceof BigInteger ? (BigInteger)id : new BigInteger(id.toString());
	}

	public void setWprocess(java.math.BigDecimal wprocess) {
		set("wprocess", wprocess);
	}

	public java.math.BigDecimal getWprocess() {
		return get("wprocess");
	}

	public void setWservice(java.math.BigDecimal wservice) {
		set("wservice", wservice);
	}

	public java.math.BigDecimal getWservice() {
		return get("wservice");
	}

	public void setWstuff(java.math.BigDecimal wstuff) {
		set("wstuff", wstuff);
	}

	public java.math.BigDecimal getWstuff() {
		return get("wstuff");
	}

	public void setLprocess(java.math.BigDecimal lprocess) {
		set("lprocess", lprocess);
	}

	public java.math.BigDecimal getLprocess() {
		return get("lprocess");
	}

	public void setLservice(java.math.BigDecimal lservice) {
		set("lservice", lservice);
	}

	public java.math.BigDecimal getLservice() {
		return get("lservice");
	}

	public void setLstuff(java.math.BigDecimal lstuff) {
		set("lstuff", lstuff);
	}

	public java.math.BigDecimal getLstuff() {
		return get("lstuff");
	}

	public void setFlag(java.lang.String flag) {
		set("flag", flag);
	}

	public java.lang.String getFlag() {
		return get("flag");
	}

}
